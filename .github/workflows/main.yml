name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set permissions for gradlew
        run: chmod +x ./gradlew  # Setze die Berechtigungen für das Gradle Wrapper-Skript

      - name: Build with Gradle
        run: ./gradlew build

      - name: Build Docker images
        run: |
          # Bau das Docker-Image für den Assessment-Service
          docker build -t your_assessment_image mrksdh/assessment  # Ersetze durch den korrekten Pfad
          
          # Bau das Docker-Image für den List-Service
          docker build -t your_list_image ./path/to/list  # Ersetze durch den korrekten Pfad

      - name: Start Docker containers
        run: |
          # Starte den Assessment-Service
          docker run -d --name assessment -p 8080:8080 your_assessment_image
          
          # Starte den List-Service
          docker run -d --name list -p 7979:7979 your_list_image

      - name: Wait for the services to be ready
        run: |
          echo "Warte auf den Assessment-Service, bis er bereit ist..."
          for i in {1..10}; do
              if curl -s http://localhost:8080/v1/dataset; then
                echo "Assessment-Service ist bereit."
                break
              fi
              echo "Warte auf den Assessment-Service..."
              sleep 10
          done

          echo "Warte auf den List-Service, bis er bereit ist..."
          for i in {1..10}; do
              if curl -s http://localhost:7979/getCustomers; then
                echo "List-Service ist bereit."
                break
              fi
              echo "Warte auf den List-Service..."
              sleep 10
          done

      - name: Execute tests with curl
        run: |
          echo "Executing GET request..."
          response_get=$(curl -s http://localhost:7979/getCustomers)  # Führe GET-Anfrage aus
          echo "GET Response: $response_get"  # Ausgabe der GET-Antwort
          
          echo "Executing POST request..."
          response_post=$(curl -X POST -s http://localhost:7979/postCustomerData -d '{}')  # Führe POST-Anfrage aus
          echo "POST Response: $response_post"  # Ausgabe der POST-Antwort

          # Überprüfe die Antwort des POST-Requests
          if [[ "$response_post" == *"expecting to see 75 customers but found 0"* ]]; then
            echo "Assessment Test fehlgeschlagen: $response_post"
            exit 1
          fi

      - name: Shut down Docker containers
        run: |
          docker stop assessment list  # Stoppe die Container
          docker rm assessment list  # Entferne die Container
